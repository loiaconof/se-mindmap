import{m as J}from"./chunk-BAOP5US2-C9QlnglV.CmMVvcbc.js";import{e as Q}from"./chunk-RGXPSUNZ-jYorlhhD.BIHvUhiu.js";import{d as m,ak as Z,al as rr,Y as tr,G as er,U as or,a as nr,$ as w,c as ar,l as cr,ap as ir,aC as sr,ar as dr,h as C,aD as hr,aE as $r,aF as mr,aG as lr}from"./theme.DOsDgB-4.js";import{X as gr}from"./gitGraph-YCYPL57B-MiYrXWen.DG3gxM9v.js";import"./framework.Ddlh_Zg3.js";import"./baseUniq-v35O2o7d.DyLEAFmw.js";import"./basePickBy-CyGFI_ex.CERSu2qO.js";import"./clone-xDQJtMzt.BpKf-pyG.js";var u={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},yr=mr.gitGraph,O=m(()=>hr({...yr,...$r().gitGraph}),"getConfig"),s=new Q(()=>{const t=O(),r=t.mainBranchName,e=t.mainBranchOrder;return{mainBranchName:r,commits:new Map,head:null,branchConfig:new Map([[r,{name:r,order:e}]]),branches:new Map([[r,null]]),currBranch:r,direction:"LR",seq:0,options:{}}});function D(){return lr({length:7})}m(D,"getID");function K(t,r){const e=Object.create(null);return t.reduce((a,c)=>{const i=r(c);return e[i]||(e[i]=!0,a.push(c)),a},[])}m(K,"uniqBy");var pr=m(function(t){s.records.direction=t},"setDirection"),fr=m(function(t){w.debug("options str",t),t=t==null?void 0:t.trim(),t=t||"{}";try{s.records.options=JSON.parse(t)}catch(r){w.error("error while parsing gitGraph options",r.message)}},"setOptions"),xr=m(function(){return s.records.options},"getOptions"),ur=m(function(t){let r=t.msg,e=t.id;const a=t.type;let c=t.tags;w.info("commit",r,e,a,c),w.debug("Entering commit:",r,e,a,c);const i=O();e=C.sanitizeText(e,i),r=C.sanitizeText(r,i),c=c==null?void 0:c.map(d=>C.sanitizeText(d,i));const h={id:e||s.records.seq+"-"+D(),message:r,seq:s.records.seq++,type:a??u.NORMAL,tags:c??[],parents:s.records.head==null?[]:[s.records.head.id],branch:s.records.currBranch};s.records.head=h,w.info("main branch",i.mainBranchName),s.records.commits.set(h.id,h),s.records.branches.set(s.records.currBranch,h.id),w.debug("in pushCommit "+h.id)},"commit"),br=m(function(t){let r=t.name;const e=t.order;if(r=C.sanitizeText(r,O()),s.records.branches.has(r))throw new Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${r}")`);s.records.branches.set(r,s.records.head!=null?s.records.head.id:null),s.records.branchConfig.set(r,{name:r,order:e}),F(r),w.debug("in createBranch")},"branch"),wr=m(t=>{let r=t.branch,e=t.id;const a=t.type,c=t.tags,i=O();r=C.sanitizeText(r,i),e&&(e=C.sanitizeText(e,i));const h=s.records.branches.get(s.records.currBranch),d=s.records.branches.get(r),l=h?s.records.commits.get(h):void 0,o=d?s.records.commits.get(d):void 0;if(l&&o&&l.branch===r)throw new Error(`Cannot merge branch '${r}' into itself.`);if(s.records.currBranch===r){const $=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw $.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["branch abc"]},$}if(l===void 0||!l){const $=new Error(`Incorrect usage of "merge". Current branch (${s.records.currBranch})has no commits`);throw $.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["commit"]},$}if(!s.records.branches.has(r)){const $=new Error('Incorrect usage of "merge". Branch to be merged ('+r+") does not exist");throw $.hash={text:`merge ${r}`,token:`merge ${r}`,expected:[`branch ${r}`]},$}if(o===void 0||!o){const $=new Error('Incorrect usage of "merge". Branch to be merged ('+r+") has no commits");throw $.hash={text:`merge ${r}`,token:`merge ${r}`,expected:['"commit"']},$}if(l===o){const $=new Error('Incorrect usage of "merge". Both branches have same head');throw $.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["branch abc"]},$}if(e&&s.records.commits.has(e)){const $=new Error('Incorrect usage of "merge". Commit with id:'+e+" already exists, use different custom Id");throw $.hash={text:`merge ${r} ${e} ${a} ${c==null?void 0:c.join(" ")}`,token:`merge ${r} ${e} ${a} ${c==null?void 0:c.join(" ")}`,expected:[`merge ${r} ${e}_UNIQUE ${a} ${c==null?void 0:c.join(" ")}`]},$}const n=d||"",x={id:e||`${s.records.seq}-${D()}`,message:`merged branch ${r} into ${s.records.currBranch}`,seq:s.records.seq++,parents:s.records.head==null?[]:[s.records.head.id,n],branch:s.records.currBranch,type:u.MERGE,customType:a,customId:!!e,tags:c??[]};s.records.head=x,s.records.commits.set(x.id,x),s.records.branches.set(s.records.currBranch,x.id),w.debug(s.records.branches),w.debug("in mergeBranch")},"merge"),Br=m(function(t){let r=t.id,e=t.targetId,a=t.tags,c=t.parent;w.debug("Entering cherryPick:",r,e,a);const i=O();if(r=C.sanitizeText(r,i),e=C.sanitizeText(e,i),a=a==null?void 0:a.map(l=>C.sanitizeText(l,i)),c=C.sanitizeText(c,i),!r||!s.records.commits.has(r)){const l=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw l.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},l}const h=s.records.commits.get(r);if(h===void 0||!h)throw new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(c&&!(Array.isArray(h.parents)&&h.parents.includes(c)))throw new Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.");const d=h.branch;if(h.type===u.MERGE&&!c)throw new Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.");if(!e||!s.records.commits.has(e)){if(d===s.records.currBranch){const x=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw x.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},x}const l=s.records.branches.get(s.records.currBranch);if(l===void 0||!l){const x=new Error(`Incorrect usage of "cherry-pick". Current branch (${s.records.currBranch})has no commits`);throw x.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},x}const o=s.records.commits.get(l);if(o===void 0||!o){const x=new Error(`Incorrect usage of "cherry-pick". Current branch (${s.records.currBranch})has no commits`);throw x.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},x}const n={id:s.records.seq+"-"+D(),message:`cherry-picked ${h==null?void 0:h.message} into ${s.records.currBranch}`,seq:s.records.seq++,parents:s.records.head==null?[]:[s.records.head.id,h.id],branch:s.records.currBranch,type:u.CHERRY_PICK,tags:a?a.filter(Boolean):[`cherry-pick:${h.id}${h.type===u.MERGE?`|parent:${c}`:""}`]};s.records.head=n,s.records.commits.set(n.id,n),s.records.branches.set(s.records.currBranch,n.id),w.debug(s.records.branches),w.debug("in cherryPick")}},"cherryPick"),F=m(function(t){if(t=C.sanitizeText(t,O()),s.records.branches.has(t)){s.records.currBranch=t;const r=s.records.branches.get(s.records.currBranch);r===void 0||!r?s.records.head=null:s.records.head=s.records.commits.get(r)??null}else{const r=new Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${t}")`);throw r.hash={text:`checkout ${t}`,token:`checkout ${t}`,expected:[`branch ${t}`]},r}},"checkout");function N(t,r,e){const a=t.indexOf(r);a===-1?t.push(e):t.splice(a,1,e)}m(N,"upsert");function W(t){const r=t.reduce((c,i)=>c.seq>i.seq?c:i,t[0]);let e="";t.forEach(function(c){c===r?e+="	*":e+="	|"});const a=[e,r.id,r.seq];for(const c in s.records.branches)s.records.branches.get(c)===r.id&&a.push(c);if(w.debug(a.join(" ")),r.parents&&r.parents.length==2&&r.parents[0]&&r.parents[1]){const c=s.records.commits.get(r.parents[0]);N(t,r,c),r.parents[1]&&t.push(s.records.commits.get(r.parents[1]))}else{if(r.parents.length==0)return;if(r.parents[0]){const c=s.records.commits.get(r.parents[0]);N(t,r,c)}}t=K(t,c=>c.id),W(t)}m(W,"prettyPrintCommitHistory");var Er=m(function(){w.debug(s.records.commits);const t=_()[0];W([t])},"prettyPrint"),vr=m(function(){s.reset(),dr()},"clear"),kr=m(function(){return[...s.records.branchConfig.values()].map((t,r)=>t.order!==null&&t.order!==void 0?t:{...t,order:parseFloat(`0.${r}`)}).sort((t,r)=>(t.order??0)-(r.order??0)).map(({name:t})=>({name:t}))},"getBranchesAsObjArray"),Cr=m(function(){return s.records.branches},"getBranches"),Lr=m(function(){return s.records.commits},"getCommits"),_=m(function(){const t=[...s.records.commits.values()];return t.forEach(function(r){w.debug(r.id)}),t.sort((r,e)=>r.seq-e.seq),t},"getCommitsArray"),Tr=m(function(){return s.records.currBranch},"getCurrentBranch"),Mr=m(function(){return s.records.direction},"getDirection"),Pr=m(function(){return s.records.head},"getHead"),U={commitType:u,getConfig:O,setDirection:pr,setOptions:fr,getOptions:xr,commit:ur,branch:br,merge:wr,cherryPick:Br,checkout:F,prettyPrint:Er,clear:vr,getBranchesAsObjArray:kr,getBranches:Cr,getCommits:Lr,getCommitsArray:_,getCurrentBranch:Tr,getDirection:Mr,getHead:Pr,setAccTitle:nr,getAccTitle:or,getAccDescription:er,setAccDescription:tr,setDiagramTitle:rr,getDiagramTitle:Z},Rr=m((t,r)=>{J(t,r),t.dir&&r.setDirection(t.dir);for(const e of t.statements)Gr(e,r)},"populate"),Gr=m((t,r)=>{const e={Commit:m(a=>r.commit(Ir(a)),"Commit"),Branch:m(a=>r.branch(Ar(a)),"Branch"),Merge:m(a=>r.merge(Or(a)),"Merge"),Checkout:m(a=>r.checkout(qr(a)),"Checkout"),CherryPicking:m(a=>r.cherryPick(Hr(a)),"CherryPicking")}[t.$type];e?e(t):w.error(`Unknown statement type: ${t.$type}`)},"parseStatement"),Ir=m(t=>({id:t.id,msg:t.message??"",type:t.type!==void 0?u[t.type]:u.NORMAL,tags:t.tags??void 0}),"parseCommit"),Ar=m(t=>({name:t.name,order:t.order??0}),"parseBranch"),Or=m(t=>({branch:t.branch,id:t.id??"",type:t.type!==void 0?u[t.type]:void 0,tags:t.tags??void 0}),"parseMerge"),qr=m(t=>t.branch,"parseCheckout"),Hr=m(t=>{var r;return{id:t.id,targetId:"",tags:((r=t.tags)==null?void 0:r.length)===0?void 0:t.tags,parent:t.parent}},"parseCherryPicking"),zr={parse:m(async t=>{const r=await gr("gitGraph",t);w.debug(r),Rr(r,U)},"parse")},j=ar(),E=j==null?void 0:j.gitGraph,G=10,I=40,L=4,M=2,A=8,v=new Map,k=new Map,z=30,q=new Map,S=[],R=0,f="LR",Sr=m(()=>{v.clear(),k.clear(),q.clear(),R=0,S=[],f="LR"},"clear"),V=m(t=>{const r=document.createElementNS("http://www.w3.org/2000/svg","text");return(typeof t=="string"?t.split(/\\n|\n|<br\s*\/?>/gi):t).forEach(e=>{const a=document.createElementNS("http://www.w3.org/2000/svg","tspan");a.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),a.setAttribute("dy","1em"),a.setAttribute("x","0"),a.setAttribute("class","row"),a.textContent=e.trim(),r.appendChild(a)}),r},"drawText"),X=m(t=>{let r,e,a;return f==="BT"?(e=m((c,i)=>c<=i,"comparisonFunc"),a=1/0):(e=m((c,i)=>c>=i,"comparisonFunc"),a=0),t.forEach(c=>{var i,h;const d=f==="TB"||f=="BT"?(i=k.get(c))==null?void 0:i.y:(h=k.get(c))==null?void 0:h.x;d!==void 0&&e(d,a)&&(r=c,a=d)}),r},"findClosestParent"),Dr=m(t=>{let r="",e=1/0;return t.forEach(a=>{const c=k.get(a).y;c<=e&&(r=a,e=c)}),r||void 0},"findClosestParentBT"),Nr=m((t,r,e)=>{let a=e,c=e;const i=[];t.forEach(h=>{const d=r.get(h);if(!d)throw new Error(`Commit not found for key ${h}`);d.parents.length?(a=jr(d),c=Math.max(a,c)):i.push(d),Yr(d,a)}),a=c,i.forEach(h=>{Kr(h,a,e)}),t.forEach(h=>{const d=r.get(h);if(d!=null&&d.parents.length){const l=Dr(d.parents);a=k.get(l).y-I,a<=c&&(c=a);const o=v.get(d.branch).pos,n=a-G;k.set(d.id,{x:o,y:n})}})},"setParallelBTPos"),Wr=m(t=>{var r;const e=X(t.parents.filter(c=>c!==null));if(!e)throw new Error(`Closest parent not found for commit ${t.id}`);const a=(r=k.get(e))==null?void 0:r.y;if(a===void 0)throw new Error(`Closest parent position not found for commit ${t.id}`);return a},"findClosestParentPos"),jr=m(t=>Wr(t)+I,"calculateCommitPosition"),Yr=m((t,r)=>{const e=v.get(t.branch);if(!e)throw new Error(`Branch not found for commit ${t.id}`);const a=e.pos,c=r+G;return k.set(t.id,{x:a,y:c}),{x:a,y:c}},"setCommitPosition"),Kr=m((t,r,e)=>{const a=v.get(t.branch);if(!a)throw new Error(`Branch not found for commit ${t.id}`);const c=r+e,i=a.pos;k.set(t.id,{x:i,y:c})},"setRootPosition"),Fr=m((t,r,e,a,c,i)=>{if(i===u.HIGHLIGHT)t.append("rect").attr("x",e.x-10).attr("y",e.y-10).attr("width",20).attr("height",20).attr("class",`commit ${r.id} commit-highlight${c%A} ${a}-outer`),t.append("rect").attr("x",e.x-6).attr("y",e.y-6).attr("width",12).attr("height",12).attr("class",`commit ${r.id} commit${c%A} ${a}-inner`);else if(i===u.CHERRY_PICK)t.append("circle").attr("cx",e.x).attr("cy",e.y).attr("r",10).attr("class",`commit ${r.id} ${a}`),t.append("circle").attr("cx",e.x-3).attr("cy",e.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${r.id} ${a}`),t.append("circle").attr("cx",e.x+3).attr("cy",e.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${r.id} ${a}`),t.append("line").attr("x1",e.x+3).attr("y1",e.y+1).attr("x2",e.x).attr("y2",e.y-5).attr("stroke","#fff").attr("class",`commit ${r.id} ${a}`),t.append("line").attr("x1",e.x-3).attr("y1",e.y+1).attr("x2",e.x).attr("y2",e.y-5).attr("stroke","#fff").attr("class",`commit ${r.id} ${a}`);else{const h=t.append("circle");if(h.attr("cx",e.x),h.attr("cy",e.y),h.attr("r",r.type===u.MERGE?9:10),h.attr("class",`commit ${r.id} commit${c%A}`),i===u.MERGE){const d=t.append("circle");d.attr("cx",e.x),d.attr("cy",e.y),d.attr("r",6),d.attr("class",`commit ${a} ${r.id} commit${c%A}`)}i===u.REVERSE&&t.append("path").attr("d",`M ${e.x-5},${e.y-5}L${e.x+5},${e.y+5}M${e.x-5},${e.y+5}L${e.x+5},${e.y-5}`).attr("class",`commit ${a} ${r.id} commit${c%A}`)}},"drawCommitBullet"),_r=m((t,r,e,a)=>{var c;if(r.type!==u.CHERRY_PICK&&(r.customId&&r.type===u.MERGE||r.type!==u.MERGE)&&E!=null&&E.showCommitLabel){const i=t.append("g"),h=i.insert("rect").attr("class","commit-label-bkg"),d=i.append("text").attr("x",a).attr("y",e.y+25).attr("class","commit-label").text(r.id),l=(c=d.node())==null?void 0:c.getBBox();if(l&&(h.attr("x",e.posWithOffset-l.width/2-M).attr("y",e.y+13.5).attr("width",l.width+2*M).attr("height",l.height+2*M),f==="TB"||f==="BT"?(h.attr("x",e.x-(l.width+4*L+5)).attr("y",e.y-12),d.attr("x",e.x-(l.width+4*L)).attr("y",e.y+l.height-12)):d.attr("x",e.posWithOffset-l.width/2),E.rotateCommitLabel))if(f==="TB"||f==="BT")d.attr("transform","rotate(-45, "+e.x+", "+e.y+")"),h.attr("transform","rotate(-45, "+e.x+", "+e.y+")");else{const o=-7.5-(l.width+10)/25*9.5,n=10+l.width/25*8.5;i.attr("transform","translate("+o+", "+n+") rotate(-45, "+a+", "+e.y+")")}}},"drawCommitLabel"),Ur=m((t,r,e,a)=>{var c;if(r.tags.length>0){let i=0,h=0,d=0;const l=[];for(const o of r.tags.reverse()){const n=t.insert("polygon"),x=t.append("circle"),$=t.append("text").attr("y",e.y-16-i).attr("class","tag-label").text(o),g=(c=$.node())==null?void 0:c.getBBox();if(!g)throw new Error("Tag bbox not found");h=Math.max(h,g.width),d=Math.max(d,g.height),$.attr("x",e.posWithOffset-g.width/2),l.push({tag:$,hole:x,rect:n,yOffset:i}),i+=20}for(const{tag:o,hole:n,rect:x,yOffset:$}of l){const g=d/2,p=e.y-19.2-$;if(x.attr("class","tag-label-bkg").attr("points",`
      ${a-h/2-L/2},${p+M}  
      ${a-h/2-L/2},${p-M}
      ${e.posWithOffset-h/2-L},${p-g-M}
      ${e.posWithOffset+h/2+L},${p-g-M}
      ${e.posWithOffset+h/2+L},${p+g+M}
      ${e.posWithOffset-h/2-L},${p+g+M}`),n.attr("cy",p).attr("cx",a-h/2+L/2).attr("r",1.5).attr("class","tag-hole"),f==="TB"||f==="BT"){const y=a+$;x.attr("class","tag-label-bkg").attr("points",`
        ${e.x},${y+2}
        ${e.x},${y-2}
        ${e.x+G},${y-g-2}
        ${e.x+G+h+4},${y-g-2}
        ${e.x+G+h+4},${y+g+2}
        ${e.x+G},${y+g+2}`).attr("transform","translate(12,12) rotate(45, "+e.x+","+a+")"),n.attr("cx",e.x+L/2).attr("cy",y).attr("transform","translate(12,12) rotate(45, "+e.x+","+a+")"),o.attr("x",e.x+5).attr("y",y+3).attr("transform","translate(14,14) rotate(45, "+e.x+","+a+")")}}}},"drawCommitTags"),Vr=m(t=>{switch(t.customType??t.type){case u.NORMAL:return"commit-normal";case u.REVERSE:return"commit-reverse";case u.HIGHLIGHT:return"commit-highlight";case u.MERGE:return"commit-merge";case u.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}},"getCommitClassType"),Xr=m((t,r,e,a)=>{const c={x:0,y:0};if(t.parents.length>0){const i=X(t.parents);if(i){const h=a.get(i)??c;return r==="TB"?h.y+I:r==="BT"?(a.get(t.id)??c).y-I:h.x+I}}else return r==="TB"?z:r==="BT"?(a.get(t.id)??c).y-I:0;return 0},"calculatePosition"),Jr=m((t,r,e)=>{var a,c;const i=f==="BT"&&e?r:r+G,h=f==="TB"||f==="BT"?i:(a=v.get(t.branch))==null?void 0:a.pos,d=f==="TB"||f==="BT"?(c=v.get(t.branch))==null?void 0:c.pos:i;if(d===void 0||h===void 0)throw new Error(`Position were undefined for commit ${t.id}`);return{x:d,y:h,posWithOffset:i}},"getCommitPosition"),Y=m((t,r,e)=>{if(!E)throw new Error("GitGraph config not found");const a=t.append("g").attr("class","commit-bullets"),c=t.append("g").attr("class","commit-labels");let i=f==="TB"||f==="BT"?z:0;const h=[...r.keys()],d=(E==null?void 0:E.parallelCommits)??!1,l=m((n,x)=>{var $,g;const p=($=r.get(n))==null?void 0:$.seq,y=(g=r.get(x))==null?void 0:g.seq;return p!==void 0&&y!==void 0?p-y:0},"sortKeys");let o=h.sort(l);f==="BT"&&(d&&Nr(o,r,i),o=o.reverse()),o.forEach(n=>{var x;const $=r.get(n);if(!$)throw new Error(`Commit not found for key ${n}`);d&&(i=Xr($,f,i,k));const g=Jr($,i,d);if(e){const p=Vr($),y=$.customType??$.type,T=((x=v.get($.branch))==null?void 0:x.index)??0;Fr(a,$,g,p,T,y),_r(c,$,g,i),Ur(c,$,g,i)}f==="TB"||f==="BT"?k.set($.id,{x:g.x,y:g.posWithOffset}):k.set($.id,{x:g.posWithOffset,y:g.y}),i=f==="BT"&&d?i+I:i+I+G,i>R&&(R=i)})},"drawCommits"),Qr=m((t,r,e,a,c)=>{const i=(f==="TB"||f==="BT"?e.x<a.x:e.y<a.y)?r.branch:t.branch,h=m(l=>l.branch===i,"isOnBranchToGetCurve"),d=m(l=>l.seq>t.seq&&l.seq<r.seq,"isBetweenCommits");return[...c.values()].some(l=>d(l)&&h(l))},"shouldRerouteArrow"),H=m((t,r,e=0)=>{const a=t+Math.abs(t-r)/2;if(e>5)return a;if(S.every(i=>Math.abs(i-a)>=10))return S.push(a),a;const c=Math.abs(t-r);return H(t,r-c/5,e+1)},"findLane"),Zr=m((t,r,e,a)=>{var c,i,h,d,l;const o=k.get(r.id),n=k.get(e.id);if(o===void 0||n===void 0)throw new Error(`Commit positions not found for commits ${r.id} and ${e.id}`);const x=Qr(r,e,o,n,a);let $="",g="",p=0,y=0,T=(c=v.get(e.branch))==null?void 0:c.index;e.type===u.MERGE&&r.id!==e.parents[0]&&(T=(i=v.get(r.branch))==null?void 0:i.index);let b;if(x){$="A 10 10, 0, 0, 0,",g="A 10 10, 0, 0, 1,",p=10,y=10;const P=o.y<n.y?H(o.y,n.y):H(n.y,o.y),B=o.x<n.x?H(o.x,n.x):H(n.x,o.x);f==="TB"?o.x<n.x?b=`M ${o.x} ${o.y} L ${B-p} ${o.y} ${g} ${B} ${o.y+y} L ${B} ${n.y-p} ${$} ${B+y} ${n.y} L ${n.x} ${n.y}`:(T=(h=v.get(r.branch))==null?void 0:h.index,b=`M ${o.x} ${o.y} L ${B+p} ${o.y} ${$} ${B} ${o.y+y} L ${B} ${n.y-p} ${g} ${B-y} ${n.y} L ${n.x} ${n.y}`):f==="BT"?o.x<n.x?b=`M ${o.x} ${o.y} L ${B-p} ${o.y} ${$} ${B} ${o.y-y} L ${B} ${n.y+p} ${g} ${B+y} ${n.y} L ${n.x} ${n.y}`:(T=(d=v.get(r.branch))==null?void 0:d.index,b=`M ${o.x} ${o.y} L ${B+p} ${o.y} ${g} ${B} ${o.y-y} L ${B} ${n.y+p} ${$} ${B-y} ${n.y} L ${n.x} ${n.y}`):o.y<n.y?b=`M ${o.x} ${o.y} L ${o.x} ${P-p} ${$} ${o.x+y} ${P} L ${n.x-p} ${P} ${g} ${n.x} ${P+y} L ${n.x} ${n.y}`:(T=(l=v.get(r.branch))==null?void 0:l.index,b=`M ${o.x} ${o.y} L ${o.x} ${P+p} ${g} ${o.x+y} ${P} L ${n.x-p} ${P} ${$} ${n.x} ${P-y} L ${n.x} ${n.y}`)}else $="A 20 20, 0, 0, 0,",g="A 20 20, 0, 0, 1,",p=20,y=20,f==="TB"?(o.x<n.x&&(e.type===u.MERGE&&r.id!==e.parents[0]?b=`M ${o.x} ${o.y} L ${o.x} ${n.y-p} ${$} ${o.x+y} ${n.y} L ${n.x} ${n.y}`:b=`M ${o.x} ${o.y} L ${n.x-p} ${o.y} ${g} ${n.x} ${o.y+y} L ${n.x} ${n.y}`),o.x>n.x&&($="A 20 20, 0, 0, 0,",g="A 20 20, 0, 0, 1,",p=20,y=20,e.type===u.MERGE&&r.id!==e.parents[0]?b=`M ${o.x} ${o.y} L ${o.x} ${n.y-p} ${g} ${o.x-y} ${n.y} L ${n.x} ${n.y}`:b=`M ${o.x} ${o.y} L ${n.x+p} ${o.y} ${$} ${n.x} ${o.y+y} L ${n.x} ${n.y}`),o.x===n.x&&(b=`M ${o.x} ${o.y} L ${n.x} ${n.y}`)):f==="BT"?(o.x<n.x&&(e.type===u.MERGE&&r.id!==e.parents[0]?b=`M ${o.x} ${o.y} L ${o.x} ${n.y+p} ${g} ${o.x+y} ${n.y} L ${n.x} ${n.y}`:b=`M ${o.x} ${o.y} L ${n.x-p} ${o.y} ${$} ${n.x} ${o.y-y} L ${n.x} ${n.y}`),o.x>n.x&&($="A 20 20, 0, 0, 0,",g="A 20 20, 0, 0, 1,",p=20,y=20,e.type===u.MERGE&&r.id!==e.parents[0]?b=`M ${o.x} ${o.y} L ${o.x} ${n.y+p} ${$} ${o.x-y} ${n.y} L ${n.x} ${n.y}`:b=`M ${o.x} ${o.y} L ${n.x-p} ${o.y} ${$} ${n.x} ${o.y-y} L ${n.x} ${n.y}`),o.x===n.x&&(b=`M ${o.x} ${o.y} L ${n.x} ${n.y}`)):(o.y<n.y&&(e.type===u.MERGE&&r.id!==e.parents[0]?b=`M ${o.x} ${o.y} L ${n.x-p} ${o.y} ${g} ${n.x} ${o.y+y} L ${n.x} ${n.y}`:b=`M ${o.x} ${o.y} L ${o.x} ${n.y-p} ${$} ${o.x+y} ${n.y} L ${n.x} ${n.y}`),o.y>n.y&&(e.type===u.MERGE&&r.id!==e.parents[0]?b=`M ${o.x} ${o.y} L ${n.x-p} ${o.y} ${$} ${n.x} ${o.y-y} L ${n.x} ${n.y}`:b=`M ${o.x} ${o.y} L ${o.x} ${n.y+p} ${g} ${o.x+y} ${n.y} L ${n.x} ${n.y}`),o.y===n.y&&(b=`M ${o.x} ${o.y} L ${n.x} ${n.y}`));if(b===void 0)throw new Error("Line definition not found");t.append("path").attr("d",b).attr("class","arrow arrow"+T%A)},"drawArrow"),rt=m((t,r)=>{const e=t.append("g").attr("class","commit-arrows");[...r.keys()].forEach(a=>{const c=r.get(a);c.parents&&c.parents.length>0&&c.parents.forEach(i=>{Zr(e,r.get(i),c,r)})})},"drawArrows"),tt=m((t,r)=>{const e=t.append("g");r.forEach((a,c)=>{var i;const h=c%A,d=(i=v.get(a.name))==null?void 0:i.pos;if(d===void 0)throw new Error(`Position not found for branch ${a.name}`);const l=e.append("line");l.attr("x1",0),l.attr("y1",d),l.attr("x2",R),l.attr("y2",d),l.attr("class","branch branch"+h),f==="TB"?(l.attr("y1",z),l.attr("x1",d),l.attr("y2",R),l.attr("x2",d)):f==="BT"&&(l.attr("y1",R),l.attr("x1",d),l.attr("y2",z),l.attr("x2",d)),S.push(d);const o=a.name,n=V(o),x=e.insert("rect"),$=e.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+h);$.node().appendChild(n);const g=n.getBBox();x.attr("class","branchLabelBkg label"+h).attr("rx",4).attr("ry",4).attr("x",-g.width-4-((E==null?void 0:E.rotateCommitLabel)===!0?30:0)).attr("y",-g.height/2+8).attr("width",g.width+18).attr("height",g.height+4),$.attr("transform","translate("+(-g.width-14-((E==null?void 0:E.rotateCommitLabel)===!0?30:0))+", "+(d-g.height/2-1)+")"),f==="TB"?(x.attr("x",d-g.width/2-10).attr("y",0),$.attr("transform","translate("+(d-g.width/2-5)+", 0)")):f==="BT"?(x.attr("x",d-g.width/2-10).attr("y",R),$.attr("transform","translate("+(d-g.width/2-5)+", "+R+")")):x.attr("transform","translate(-19, "+(d-g.height/2)+")")})},"drawBranches"),et=m(function(t,r,e,a,c){return v.set(t,{pos:r,index:e}),r+=50+(c?40:0)+(f==="TB"||f==="BT"?a.width/2:0),r},"setBranchPosition"),ot=m(function(t,r,e,a){if(Sr(),w.debug("in gitgraph renderer",t+`
`,"id:",r,e),!E)throw new Error("GitGraph config not found");const c=E.rotateCommitLabel??!1,i=a.db;q=i.getCommits();const h=i.getBranchesAsObjArray();f=i.getDirection();const d=cr(`[id="${r}"]`);let l=0;h.forEach((o,n)=>{var x;const $=V(o.name),g=d.append("g"),p=g.insert("g").attr("class","branchLabel"),y=p.insert("g").attr("class","label branch-label");(x=y.node())==null||x.appendChild($);const T=$.getBBox();l=et(o.name,l,n,T,c),y.remove(),p.remove(),g.remove()}),Y(d,q,!1),E.showBranches&&tt(d,h),rt(d,q),Y(d,q,!0),ir.insertTitle(d,"gitTitleText",E.titleTopMargin??0,i.getDiagramTitle()),sr(void 0,d,E.diagramPadding,E.useMaxWidth)},"draw"),nt={draw:ot},at=m(t=>`
  .commit-id,
  .commit-msg,
  .branch-label {
    fill: lightgrey;
    color: lightgrey;
    font-family: 'trebuchet ms', verdana, arial, sans-serif;
    font-family: var(--mermaid-font-family);
  }
  ${[0,1,2,3,4,5,6,7].map(r=>`
        .branch-label${r} { fill: ${t["gitBranchLabel"+r]}; }
        .commit${r} { stroke: ${t["git"+r]}; fill: ${t["git"+r]}; }
        .commit-highlight${r} { stroke: ${t["gitInv"+r]}; fill: ${t["gitInv"+r]}; }
        .label${r}  { fill: ${t["git"+r]}; }
        .arrow${r} { stroke: ${t["git"+r]}; }
        `).join(`
`)}

  .branch {
    stroke-width: 1;
    stroke: ${t.lineColor};
    stroke-dasharray: 2;
  }
  .commit-label { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelColor};}
  .commit-label-bkg { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelBackground}; opacity: 0.5; }
  .tag-label { font-size: ${t.tagLabelFontSize}; fill: ${t.tagLabelColor};}
  .tag-label-bkg { fill: ${t.tagLabelBackground}; stroke: ${t.tagLabelBorder}; }
  .tag-hole { fill: ${t.textColor}; }

  .commit-merge {
    stroke: ${t.primaryColor};
    fill: ${t.primaryColor};
  }
  .commit-reverse {
    stroke: ${t.primaryColor};
    fill: ${t.primaryColor};
    stroke-width: 3;
  }
  .commit-highlight-outer {
  }
  .commit-highlight-inner {
    stroke: ${t.primaryColor};
    fill: ${t.primaryColor};
  }

  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}
  .gitTitleText {
    text-anchor: middle;
    font-size: 18px;
    fill: ${t.textColor};
  }
`,"getStyles"),ct=at,yt={parser:zr,db:U,renderer:nt,styles:ct};export{yt as diagram};
