import{_ as t,c as s,o as r,ae as n}from"./chunks/framework.nnoneqZI.js";const g=JSON.parse('{"title":"Event-Driven Architecture ( EDA )","description":"","frontmatter":{},"headers":[],"relativePath":"docs/software-design-architecture/eda/index.md","filePath":"docs/software-design-architecture/eda/index.md"}'),a={name:"docs/software-design-architecture/eda/index.md"};function o(i,e,c,d,h,l){return r(),s("div",null,e[0]||(e[0]=[n('<h1 id="event-driven-architecture-eda" tabindex="-1">Event-Driven Architecture ( EDA ) <a class="header-anchor" href="#event-driven-architecture-eda" aria-label="Permalink to &quot;Event-Driven Architecture ( EDA )&quot;">â€‹</a></h1><p><strong>Event-Driven Architecture</strong> is an architectural style in wich a system&#39;s components communicate with one another <strong>asynchronously</strong> by exchanging <a href="/se-mindmap/docs/software-design-architecture/eda/events.html">event</a> messages.</p><p>The world <strong>driven</strong> in the EDA means your whole system depends on succesfull delivery of the messages. Ensure that events are always delivered consistently, no matter what:</p><ul><li>Use <strong>outbox pattern</strong> to publish messages reliably</li><li>When publishing messages, ensure that the <strong>subscribers will be able to deduplicate the message</strong> and identify and reorder out-of-order messages</li><li>Leverage the <strong>saga</strong> and <strong>process manager</strong> patterns when orchestrating cross-bounded context process that require issuing compensating actions</li></ul>',4)]))}const m=t(a,[["render",o]]);export{g as __pageData,m as default};
