import{_ as e,a as s,o,ah as r}from"./chunks/framework.Ddlh_Zg3.js";const h=JSON.parse('{"title":"AWS EC2 Storage","description":"","frontmatter":{},"headers":[],"relativePath":"docs/cloud/aws/services/ec2/storage.md","filePath":"docs/cloud/aws/services/ec2/storage.md"}'),i={name:"docs/cloud/aws/services/ec2/storage.md"};function l(a,t,n,d,c,g){return o(),s("div",null,t[0]||(t[0]=[r('<h1 id="aws-ec2-storage" tabindex="-1">AWS EC2 Storage <a class="header-anchor" href="#aws-ec2-storage" aria-label="Permalink to “AWS EC2 Storage”">​</a></h1><h2 id="ebs-elastic-block-store" tabindex="-1">EBS - Elastic Block Store <a class="header-anchor" href="#ebs-elastic-block-store" aria-label="Permalink to “EBS - Elastic Block Store”">​</a></h2><ul><li>An EBS Volume is a <strong>network drive</strong> that can attached and detached to a instance while they run allowing this instance to <strong>persist data</strong></li><li>Can only be <strong>mounted to one instance at a time</strong></li><li><strong>Limitations</strong>: <ul><li>bound to a <strong>specific AZ</strong></li><li>Have a <strong>provisoned capacity</strong></li></ul></li><li><strong>Snapshots</strong>: <ul><li>Recommended to <strong>detach a volume before this operation</strong></li><li>Snapshots has <strong>not limitations across AZ or Region</strong></li><li><strong>Features</strong>: <ul><li><strong>EBS Snapshot Archive</strong><ul><li>Move a Snapshot to an ”archive tier” that is 75% cheaper</li><li>Takes within 24 to 72 hours for restoring the archive</li></ul></li><li><strong>Recycle Bin for EBS Snapshots</strong><ul><li>Setup rules to retain deleted snapshots so you can recover them after an accidental deletion</li><li>Specify retention (from 1 day to 1 year)</li></ul></li><li><strong>Fast Snapshot Restore (FSR)</strong><ul><li>Force full initialization of snapshot to have no latency on the first use (high costs)</li></ul></li></ul></li></ul></li><li><strong>Volume Types</strong>: <ul><li><strong>SSD</strong>: <ul><li><strong>General purpose SSD</strong> (gp2, gp3): balances price and performance for a wide variety of workloads</li><li><strong>Provisioned IOPS (PIOPS) SSD</strong> (io1, io2): Highest-performance SSD volume for mission-critical low-latency or high-throughput workloads <ul><li><strong>Use cases</strong>: databases workloads (sensitive to storage perf and consistency)</li><li><strong>Multi-Attach Support</strong>: <ul><li>Each instance has full read &amp; write permissions to the high-performance volume</li><li><strong>Use cases</strong>: <ul><li>Achieve <strong>higher application availability</strong> in clustered Linux applications (ex: Teradata)</li><li>Applications must manage concurrent write operations</li></ul></li><li>Up to 16 EC2 Instances at a time</li><li>Must use a file system that’s cluster-aware (not XFS, EXT4, etc…)</li></ul></li></ul></li></ul></li><li><strong>HDD</strong><ul><li><strong>Throughput Optimized HDD</strong> (st1): Low cost HDD volume designed for frequently accessed, throughput- intensive workloads <ul><li><strong>Use cases</strong>: Big Data, Data Warehouses, Log Processing</li></ul></li><li><strong>Cold HDD</strong> (sc1): Lowest cost HDD volume designed for less frequently accessed workloads <ul><li><strong>Use cases</strong>: Scenarios where lowest cost is important</li></ul></li></ul></li></ul></li><li><strong>Encryption</strong><ul><li>An encrypted EBS volume has the following <strong>characteristics</strong>: <ul><li>Data at rest is encrypted inside the volume</li><li>All the data in flight moving between the instance and the volume is encrypted</li><li>All snapshots are encrypted</li><li>All volumes created from the snapshot</li></ul></li><li>Encryption has a minimal impact on latency</li><li>EBS Encryption leverages keys from KMS (AES-256)</li></ul></li></ul><details class="details custom-block"><summary>EBS Volume Types summary</summary><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Max IOPS</th><th>Max Throughput</th><th>Volume Size Range</th><th>Durability</th></tr></thead><tbody><tr><td><code>gp3</code></td><td>SSD</td><td>16,000</td><td>1,000 MiB/s</td><td>1 GiB – 16 TiB</td><td>99.8%</td></tr><tr><td><code>gp2</code></td><td>SSD</td><td>16,000</td><td>250 MiB/s</td><td>1 GiB – 16 TiB</td><td>99.8%</td></tr><tr><td><code>io2</code></td><td>SSD</td><td>64,000</td><td>1,000 MiB/s</td><td>4 GiB – 16 TiB</td><td>99.999%</td></tr><tr><td><code>io1</code></td><td>SSD</td><td>64,000</td><td>1,000 MiB/s</td><td>4 GiB – 16 TiB</td><td>99.8%</td></tr><tr><td><code>st1</code></td><td>HDD</td><td>500</td><td>500 MiB/s</td><td>125 GiB – 16 TiB</td><td>99.8%</td></tr><tr><td><code>sc1</code></td><td>HDD</td><td>250</td><td>250 MiB/s</td><td>125 GiB – 16 TiB</td><td>99.8%</td></tr></tbody></table></details><h2 id="efs-elastic-file-system" tabindex="-1">EFS - Elastic File System <a class="header-anchor" href="#efs-elastic-file-system" aria-label="Permalink to “EFS - Elastic File System”">​</a></h2><ul><li><strong>NFS file system</strong> that allows multiple EC2 instances to access the same shared file system concurrently</li><li><strong>Configuration</strong>: <ul><li><strong>Performance Modes</strong> (set at EFS creation time): <ul><li><strong>General Purpose (default)</strong>: latency-sensitive use cases (web server, CMS, etc…)</li><li><strong>Max I/O</strong>: higher latency, throughput, highly parallel (big data, media processing)</li></ul></li><li><strong>Throughput Modes</strong>: <ul><li><strong>Bursting</strong>: 1 TB = 50MiB/s + burst of up to 100MiB/s</li><li><strong>Provisioned</strong>: set your throughput regardless of storage size, ex: 1 GiB/s for 1 TB storage</li><li><strong>Elastic</strong>: automatically scales throughput up or down based on your workloads <ul><li>Up to 3GiB/s for reads and 1GiB/s for writes</li><li>Used for unpredictable workloads</li></ul></li></ul></li></ul></li><li><strong>Storage Classes</strong>: <ul><li><strong>Storage Tiers</strong>: <ul><li><strong>Standard</strong>: for frequently accessed files</li><li><strong>Infrequent access (EFS-IA)</strong>: cost to retrieve files, lower price to store.</li><li><strong>Archive</strong>: rarely accessed data (few times each year), 50% cheaper</li></ul></li><li><strong>Availability and durability</strong>: <ul><li><strong>Standard</strong>: Multi-AZ, great for prod</li><li><strong>One Zone</strong>: One AZ, great for dev, backup enabled by default, compatible with IA (EFS One Zone-IA)</li></ul></li><li><strong>Features</strong>: <ul><li><strong>Lifecycle Policies</strong>: allows to move files between storage tiers for cost savings</li></ul></li></ul></li><li><strong>Use cases</strong>: <ul><li>Content management and web serving</li><li>Big data and analytics workloads</li><li>Development environments and CI/CD pipelines</li></ul></li><li>Uses: <ul><li><strong>NFSv4.1 protocol</strong></li><li><strong>Security group</strong> to control access to EFS</li></ul></li><li><strong>Encryption at rest</strong> using KMS</li><li>File system <strong>scales automatically</strong>, <strong>pay-per-use</strong></li><li><strong>Limitations</strong>: <ul><li><strong>Not compatible with Windows based AMI</strong></li></ul></li></ul><h2 id="ebs-vs-efs-vs-instance-store" tabindex="-1">EBS vs EFS vs Instance Store <a class="header-anchor" href="#ebs-vs-efs-vs-instance-store" aria-label="Permalink to “EBS vs EFS vs Instance Store”">​</a></h2><ul><li><strong>EBS</strong>: Best for <strong>single-instance storage</strong> with <strong>low latency</strong> and <strong>persistent block storage</strong> needs (e.g., databases, root volumes).</li><li><strong>EFS</strong>: Best for <strong>multiple-instance</strong> access with <strong>scalable file storage</strong> and <strong>high availability</strong> (e.g., shared configs, logs, web content).</li><li><strong>Instance Store</strong>: Best for <strong>temporary high-speed local storage</strong> (e.g., buffers, scratch data, caches) where data loss is acceptable.</li></ul><details class="details custom-block"><summary>Comparison Table</summary><table tabindex="0"><thead><tr><th>Feature</th><th>EBS (Elastic Block Store)</th><th>EFS (Elastic File System)</th><th>Instance Store</th></tr></thead><tbody><tr><td><strong>Type</strong></td><td>Block Storage</td><td>File Storage (NFS)</td><td>Ephemeral Block Storage</td></tr><tr><td><strong>Persistence</strong></td><td>Persistent</td><td>Persistent</td><td>Non-persistent (lost on stop/terminate)</td></tr><tr><td><strong>Access</strong></td><td>One EC2 instance at a time</td><td>Multiple EC2 instances (shared)</td><td>One EC2 instance only</td></tr><tr><td><strong>Performance Types</strong></td><td>gp3, gp2, io2, io1, st1, sc1</td><td>General Purpose, Max I/O</td><td>Depends on instance type</td></tr><tr><td><strong>Max Throughput</strong></td><td>Up to 1,000 MiB/s</td><td>Scales with usage (or provisioned)</td><td>Very high (dependent on instance)</td></tr><tr><td><strong>Scalability</strong></td><td>Up to 16 TiB per volume</td><td>Virtually unlimited</td><td>Fixed by instance</td></tr><tr><td><strong>Durability</strong></td><td>99.999%</td><td>99.999999999%</td><td>No durability guarantee</td></tr><tr><td><strong>Backup Support</strong></td><td>Snapshots via EBS</td><td>Backup via AWS Backup</td><td>Not supported</td></tr><tr><td><strong>Use Cases</strong></td><td>Databases, OS boot volumes, apps needing low latency</td><td>Shared web content, dev environments, home dirs</td><td>Cache, temporary data, buffers</td></tr><tr><td><strong>Pricing Model</strong></td><td>Pay per GB + IOPS (provisioned if needed)</td><td>Pay per GB + throughput mode</td><td>Included in EC2 price</td></tr><tr><td><strong>Mounting Requirement</strong></td><td>Attach to EC2, block device</td><td>Mount via NFSv4.1 or EFS mount helper</td><td>Auto-attached on instance launch</td></tr><tr><td><strong>Data Encryption</strong></td><td>Supported (at rest and in transit)</td><td>Supported (at rest and in transit)</td><td>Not supported</td></tr><tr><td><strong>Availability Zone Scope</strong></td><td>Tied to single AZ (use EBS Multi-Attach or Snap for HA)</td><td>Regional (spans multiple AZs)</td><td>Tied to the EC2 host</td></tr></tbody></table></details>',9)]))}const p=e(i,[["render",l]]);export{h as __pageData,p as default};
