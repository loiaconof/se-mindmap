import{_ as t,c as a,o as n,ae as r}from"./chunks/framework.nnoneqZI.js";const g=JSON.parse('{"title":"Tactical Modernization","description":"","frontmatter":{},"headers":[],"relativePath":"docs/software-design-architecture/ddd/tactical-modernization.md","filePath":"docs/software-design-architecture/ddd/tactical-modernization.md"}'),i={name:"docs/software-design-architecture/ddd/tactical-modernization.md"};function o(c,e,s,d,l,h){return n(),a("div",null,e[0]||(e[0]=[r('<h1 id="tactical-modernization" tabindex="-1">Tactical Modernization <a class="header-anchor" href="#tactical-modernization" aria-label="Permalink to &quot;Tactical Modernization&quot;">​</a></h1><p>To implement DDD into a legacy system</p><h2 id="strangler-pattern" tabindex="-1">Strangler Pattern <a class="header-anchor" href="#strangler-pattern" aria-label="Permalink to &quot;Strangler Pattern&quot;">​</a></h2><p>Start creating a new bounded context - <strong>the strangler</strong> - and use it to implement new requirements. Gradually migrate the legacy context&#39;s functionalities into it.</p><p>Usually the <strong>Strangler Pattern</strong> is used in tandem with the <strong>Facade Pattern</strong>: a thin abstraction layer that acts as the public interface and is in charge o forwarding the requests to processing either by the legacy or the modernized boundered context. When migration completes, let the legacy and the facade die.</p><p>While migrating, both the modernized and the legacy can share the same database, avoiding complex integration between the contexts.</p><h2 id="nuances-to-be-aware-of" tabindex="-1">Nuances to be aware of <a class="header-anchor" href="#nuances-to-be-aware-of" aria-label="Permalink to &quot;Nuances to be aware of&quot;">​</a></h2><ol><li>Small incremental steps are safer than a big rewrite</li><li>Gradually introduce the elements of the domain model pattern, refactoring to a domain model doesn&#39;t have to be atomic change</li><li>Applying DDD is not an all-or-nothing, integration with other design patterns could be fine</li></ol>',8)]))}const p=t(i,[["render",o]]);export{g as __pageData,p as default};
