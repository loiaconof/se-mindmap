import{_ as t,c as a,o as i,ae as s}from"./chunks/framework.nnoneqZI.js";const h=JSON.parse('{"title":"EC2","description":"","frontmatter":{},"headers":[],"relativePath":"docs/cloud/aws/services/ec2.md","filePath":"docs/cloud/aws/services/ec2.md"}'),r={name:"docs/cloud/aws/services/ec2.md"};function o(n,e,l,c,d,p){return i(),a("div",null,e[0]||(e[0]=[s('<h1 id="ec2" tabindex="-1">EC2 <a class="header-anchor" href="#ec2" aria-label="Permalink to &quot;EC2&quot;">​</a></h1><h2 id="ec2-instance-types" tabindex="-1">EC2 Instance Types <a class="header-anchor" href="#ec2-instance-types" aria-label="Permalink to &quot;EC2 Instance Types&quot;">​</a></h2><p>AWS has the following naming convention <code>xy.zzzzzz</code></p><ul><li><strong>x</strong> : instance class</li><li><strong>y</strong> : hardware generation ( AWS improves them over time )</li><li><strong>zzzzzz</strong> : size of within the instance class</li></ul><h3 id="ec2-instance-types-general-purpose" tabindex="-1">EC2 Instance Types - General Purpose <a class="header-anchor" href="#ec2-instance-types-general-purpose" aria-label="Permalink to &quot;EC2 Instance Types - General Purpose&quot;">​</a></h3><ul><li>Great for diversity of workloads such as web servers or code repositories</li><li>Balance between <ul><li>Compute</li><li>Memory</li><li>Networking</li></ul></li></ul><h3 id="ec2-instance-types-general-purpose-1" tabindex="-1">EC2 Instance Types - General Purpose <a class="header-anchor" href="#ec2-instance-types-general-purpose-1" aria-label="Permalink to &quot;EC2 Instance Types - General Purpose&quot;">​</a></h3><ul><li>Great for compute-intensive tasks that require high performance processors</li><li>Use Cases: <ul><li>Barch processing workloads</li><li>Media transcoding</li><li>High performance web servers</li><li>High performance computing ( HPC )</li><li>Scientific modeling &amp; machine learning</li><li>Dedicated gaming servers</li></ul></li></ul><h3 id="ec2-instance-types-memory-optimized" tabindex="-1">EC2 Instance Types - Memory Optimized <a class="header-anchor" href="#ec2-instance-types-memory-optimized" aria-label="Permalink to &quot;EC2 Instance Types - Memory Optimized&quot;">​</a></h3><ul><li>Fast performance for workloads that process large data sets in memory</li><li>Use Cases: <ul><li>High performance, relational/non-relational databases</li><li>Distributed web scale cache stores</li><li>In-memory database optimized for BI ( Business Intellingence )</li><li>Applications performing real-time processing of big unstructured data</li></ul></li></ul><h3 id="ec2-instance-types-storange-optimized" tabindex="-1">EC2 Instance Types - Storange Optimized <a class="header-anchor" href="#ec2-instance-types-storange-optimized" aria-label="Permalink to &quot;EC2 Instance Types - Storange Optimized&quot;">​</a></h3><ul><li>Great for storage-intensive tasks that require high, sequential read and write access to large data sets on local storage</li><li>Use Cases: <ul><li>High frequency online transaction processing ( OLTP ) systems</li><li>Relational &amp; NoSQL databases</li><li>Cache for in-memory databases</li><li>Data warehousing applications</li><li>Distributed file systems</li></ul></li></ul><h2 id="security-groups" tabindex="-1">Security Groups <a class="header-anchor" href="#security-groups" aria-label="Permalink to &quot;Security Groups&quot;">​</a></h2><p>Security groups are fundamental of network security in AWS, they controls how traffic is allowed into or out EC2 Instances.</p><p>Security Groups are acting as firewalls and only contain <strong>allow</strong> rules.</p><p>They regulate:</p><ul><li>Access to Ports</li><li>Authorised IP ranges - IPv4 and IPv6</li><li>Control of inbound network ( from other to the instance )</li><li>control of outbound network ( from the instance to other )</li></ul><p>ex.</p><table tabindex="0"><thead><tr><th>Type</th><th>Protocol</th><th>Port Range</th><th>Source</th><th>Description</th></tr></thead><tbody><tr><td>HTTP</td><td>TCP</td><td>80</td><td>0.0.0.0/0</td><td>test http page</td></tr><tr><td>SSH</td><td>TCP</td><td>22</td><td>122.149.196.85/32</td><td></td></tr><tr><td>Custom TCP Rule</td><td>TCP</td><td>4567</td><td>0.0.0.0/0</td><td>java app</td></tr></tbody></table>',19)]))}const m=t(r,[["render",o]]);export{h as __pageData,m as default};
