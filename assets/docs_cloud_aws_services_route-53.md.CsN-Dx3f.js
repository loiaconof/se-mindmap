import{_ as e,a as o,o as s,ah as r}from"./chunks/framework.Ddlh_Zg3.js";const p=JSON.parse('{"title":"Route 53","description":"","frontmatter":{},"headers":[],"relativePath":"docs/cloud/aws/services/route-53.md","filePath":"docs/cloud/aws/services/route-53.md"}'),a={name:"docs/cloud/aws/services/route-53.md"};function d(i,t,n,l,c,h){return s(),o("div",null,t[0]||(t[0]=[r('<h1 id="route-53" tabindex="-1">Route 53 <a class="header-anchor" href="#route-53" aria-label="Permalink to “Route 53”">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to “Overview”">​</a></h2><p>Amazon Route 53 is a <strong>scalable and highly available Domain Name System (DNS)</strong> service designed to route end-user requests to applications hosted on AWS or elsewhere on the internet. It also offers <strong>domain registration</strong> and <strong>health checking</strong> capabilities.</p><h2 id="dns-records" tabindex="-1">DNS Records <a class="header-anchor" href="#dns-records" aria-label="Permalink to “DNS Records”">​</a></h2><p>In Route 53, <strong>DNS records</strong> are used to define how requests for a domain are routed. Each record type serves a different purpose and is stored inside a <strong>Hosted Zone</strong>.</p><p>Each record contains:</p><ul><li><strong>Domain/subdomain Name</strong> – e.g., example.com</li><li><strong>Record Type</strong> – e.g., A or AAAA</li><li><strong>Value</strong> – e.g., 12.34.56.78</li><li><strong>Routing Policy</strong> – how Route 53 responds to queries</li><li><strong>TTL</strong> – amount of time the record cached at DNS Resolvers</li></ul><details class="details custom-block"><summary>Record Types</summary><table tabindex="0"><thead><tr><th>Type</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td><strong>A</strong></td><td>Maps hostname to an <strong>IPv4</strong> address</td><td><code>example.com → 192.0.2.1</code></td></tr><tr><td><strong>AAAA</strong></td><td>Maps hostname to an <strong>IPv6</strong> address</td><td><code>ipv6.example.com → 2001:db8::ff00:42:8329</code></td></tr><tr><td><strong>CNAME</strong></td><td>Maps a subdomain to another hostname</td><td><code>www.example.com → myapp.heroku.com</code></td></tr><tr><td><strong>NS</strong></td><td>Delegates DNS zone to name servers</td><td><code>example.com NS ns-123.awsdns-45.org</code></td></tr><tr><td><strong>MX</strong></td><td>Specifies mail servers for email delivery</td><td><code>example.com MX 10 mail.example.com</code></td></tr><tr><td><strong>TXT</strong></td><td>Contains arbitrary text</td><td><code>example.com TXT &quot;v=spf1 include:amazonses.com -all&quot;</code></td></tr><tr><td><strong>Alias</strong></td><td>AWS-specific record for AWS services</td><td><code>example.com Alias → my-load-balancer-123.elb.amazonaws.com</code></td></tr></tbody></table><blockquote><p>⚠️ <strong>CNAME records cannot be used at the apex domain</strong> (e.g., <code>example.com</code>), but <strong>Alias records can</strong>.</p></blockquote></details><h2 id="hosted-zones" tabindex="-1">Hosted Zones <a class="header-anchor" href="#hosted-zones" aria-label="Permalink to “Hosted Zones”">​</a></h2><p>In Route 53, a <strong>Hosted Zone</strong> is a container that holds the DNS records for a specific domain, such as <code>example.com</code>.</p><p>Each hosted zone is associated with a <strong>domain name</strong> and contains records that define how DNS queries for that domain and its subdomains should be handled.</p><p>There are two types of hosted zones:</p><table tabindex="0"><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><strong>Public Hosted Zone</strong></td><td>Used for domains that must be accessible over the internet. These zones resolve DNS queries from public clients, such as browsers or mobile apps.</td></tr><tr><td><strong>Private Hosted Zone</strong></td><td>Used for domains that are only accessible within one or more <strong>Amazon VPCs</strong>. This is ideal for internal applications or microservices that should not be exposed publicly.</td></tr></tbody></table><details class="details custom-block"><summary>Examples</summary><ul><li>A <strong>Public Hosted Zone</strong> might contain records like <code>www.example.com</code> → <code>A record</code> pointing to a public IP of a load balancer.</li><li>A <strong>Private Hosted Zone</strong> might have <code>internal.example.com</code> → <code>A record</code> pointing to a private EC2 IP, resolvable only inside the VPC.</li></ul></details><h2 id="routing-policies" tabindex="-1">Routing Policies <a class="header-anchor" href="#routing-policies" aria-label="Permalink to “Routing Policies”">​</a></h2><p>Route 53 supports several policies to control how traffic is routed to resources:</p><table tabindex="0"><thead><tr><th>Policy</th><th>Description</th><th>Supports Health Checks</th></tr></thead><tbody><tr><td><strong>Simple</strong></td><td>Basic DNS response with no special routing.</td><td>❌</td></tr><tr><td><strong>Weighted</strong></td><td>Distributes traffic based on defined weights.</td><td>✅ (optional)</td></tr><tr><td><strong>Latency-based</strong></td><td>Routes traffic to the region with the lowest latency.</td><td>✅ (optional)</td></tr><tr><td><strong>Failover</strong></td><td>Active-passive configuration using health checks.</td><td>✅ (required)</td></tr><tr><td><strong>Geolocation</strong></td><td>Routes based on the user&#39;s location.</td><td>✅ (optional)</td></tr><tr><td><strong>Geoproximity</strong></td><td>Location-based routing with traffic bias (requires Traffic Flow).</td><td>✅ (optional)</td></tr><tr><td><strong>Multi-Value Answer</strong></td><td>Returns multiple healthy records (up to 8) to simulate load balancing.</td><td>✅ (required for health-based filtering)</td></tr></tbody></table><h2 id="health-checks" tabindex="-1">Health Checks <a class="header-anchor" href="#health-checks" aria-label="Permalink to “Health Checks”">​</a></h2><p>Health checks monitor the availability and performance of your applications.</p><details class="details custom-block"><summary>Features</summary><ul><li>HTTP, HTTPS, or TCP endpoint checks</li><li>Health checks can trigger DNS failover</li><li>Can be linked to CloudWatch Alarms</li><li>Supports calculated (composite) health checks using Boolean logic</li></ul></details>',20)]))}const g=e(a,[["render",d]]);export{p as __pageData,g as default};
