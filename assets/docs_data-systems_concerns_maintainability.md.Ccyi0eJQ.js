import{_ as i,a as t,o as e,ah as n}from"./chunks/framework.Ddlh_Zg3.js";const y=JSON.parse('{"title":"Maintainability","description":"","frontmatter":{},"headers":[],"relativePath":"docs/data-systems/concerns/maintainability.md","filePath":"docs/data-systems/concerns/maintainability.md"}'),s={name:"docs/data-systems/concerns/maintainability.md"};function o(r,a,l,c,d,p){return e(),t("div",null,a[0]||(a[0]=[n('<h1 id="maintainability" tabindex="-1">Maintainability <a class="header-anchor" href="#maintainability" aria-label="Permalink to “Maintainability”">​</a></h1><p>We can—and should—design software in a way that minimizes pain during maintenance, and thus helps avoid turning it into legacy software.</p><p>To achieve this, we focus on three key design principles for software systems:</p><h2 id="operability" tabindex="-1">Operability <a class="header-anchor" href="#operability" aria-label="Permalink to “Operability”">​</a></h2><p>Make it easy for operations teams to keep the system running smoothly.</p><p>Responsabilities to take care:</p><ul><li><strong>Monitoring</strong></li><li><strong>Tracking</strong></li><li>**</li></ul><h2 id="simplicity" tabindex="-1">Simplicity <a class="header-anchor" href="#simplicity" aria-label="Permalink to “Simplicity”">​</a></h2><p>Make it easy for new engineers to understand the system, by removing as much complexity as possible for the system.</p><h2 id="evolvability" tabindex="-1">Evolvability <a class="header-anchor" href="#evolvability" aria-label="Permalink to “Evolvability”">​</a></h2><p>Make it easy for engineers to make changes to the system in the future, adapting it for unanticipated use cases and requirements change. Also known as <strong>Extensibility</strong>, <strong>Modifiability</strong> or <strong>Plasticity</strong></p>',11)]))}const h=i(s,[["render",o]]);export{y as __pageData,h as default};
