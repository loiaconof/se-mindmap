import{_ as i,a as t,o as e,ah as s}from"./chunks/framework.Ddlh_Zg3.js";const m=JSON.parse('{"title":"Auto Scaling Group (ASG)","description":"","frontmatter":{},"headers":[],"relativePath":"docs/cloud/aws/services/ec2/autoscaling-group.md","filePath":"docs/cloud/aws/services/ec2/autoscaling-group.md"}'),n={name:"docs/cloud/aws/services/ec2/autoscaling-group.md"};function o(l,a,r,c,g,u){return e(),t("div",null,a[0]||(a[0]=[s('<h1 id="auto-scaling-group-asg" tabindex="-1">Auto Scaling Group (ASG) <a class="header-anchor" href="#auto-scaling-group-asg" aria-label="Permalink to “Auto Scaling Group (ASG)”">​</a></h1><p>An <strong>Auto Scaling Group (ASG)</strong> is <strong>AWS’s native solution for horizontal scalability</strong>, enabling automatic scaling of EC2 instances based on real-time demand.</p><p>By orchestrating instance lifecycle events, ASGs automatically <strong>scale out</strong> (add instances) during high load and <strong>scale in</strong> (remove instances) when demand decreases, optimizing both performance and cost.</p><h2 id="key-features" tabindex="-1">Key Features <a class="header-anchor" href="#key-features" aria-label="Permalink to “Key Features”">​</a></h2><ul><li><strong>Horizontal Scaling</strong>: Automatically adjusts the number of EC2 instances to match demand</li><li><strong>Health Checks</strong>: Detects and replaces unhealthy instances to maintain availability</li><li><strong>Capacity Settings</strong>: Define minimum, maximum, and desired capacity thresholds</li><li><strong>Launch Template/Configuration</strong>: Specifies instance settings (AMI, type, key pair, networking)</li><li><strong>Seamless Integration</strong>: <ul><li><strong>Elastic Load Balancer (ELB)</strong>: Distributes traffic across healthy instances</li><li><strong>CloudWatch Alarms</strong>: Triggers scaling actions based on metrics</li><li><strong>Lifecycle Hooks</strong>: Add custom actions during instance launch or termination</li></ul></li></ul><h2 id="scaling-policies" tabindex="-1">Scaling Policies <a class="header-anchor" href="#scaling-policies" aria-label="Permalink to “Scaling Policies”">​</a></h2><p>ASGs support multiple policy types to automate instance scaling:</p><ul><li><strong>Dynamic Scaling</strong>: <ul><li><strong>Target Tracking Scaling</strong>: Automatically adjusts capacity to maintain a target metric (e.g., 50% CPU).</li><li><strong>Simple / Step Scaling</strong>: Uses CloudWatch alarms to trigger predefined scaling actions.</li></ul></li><li><strong>Scheduled Scaling</strong>: Scales capacity at specific times based on predictable traffic patterns (e.g., business hours).</li><li><strong>Predictive Scaling</strong>: Uses machine learning to forecast traffic and proactively adjust capacity ahead of time.</li></ul><h2 id="common-use-cases" tabindex="-1">Common Use Cases <a class="header-anchor" href="#common-use-cases" aria-label="Permalink to “Common Use Cases”">​</a></h2><ul><li>Web applications with fluctuating traffic</li><li>Microservices architectures</li><li>Batch processing systems</li><li>High availability environments</li></ul>',10)]))}const p=i(n,[["render",o]]);export{m as __pageData,p as default};
